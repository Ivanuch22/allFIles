{"ast":null,"code":"import { observer } from \"mobx-react\";\n// class TodoStore {\n//   todos: Array<ITodo> = [];\n//   pendingRequests = 0;\n\n//   constructor() {\n//     makeObservable(this, {\n//       todos: observable,\n//       pendingRequests: observable,\n//       completedTodosCount: computed,\n//       report: computed,\n//       addTodo: action,\n//     });\n//     autorun(() => console.log(this.report));\n//   }\n\n//   get completedTodosCount() {\n//     return this.todos.filter((todo: ITodo) => todo.completed === true).length;\n//   }\n\n//   get report() {\n//     if (this.todos.length === 0) {\n//       return \"<none>\";\n//     }\n//     var nextTodo: ITodo | undefined = this.todos.find(\n//       (todo: ITodo) => todo.completed === false\n//     );\n//     return `<p>Next todo: \"${nextTodo ? nextTodo.task : \"<none>\"}. Progress: ${\n//       this.completedTodosCount\n//     }/${this.todos.length} </p>`;\n//   }\n\n//   addTodo(task: string) {\n//     this.todos.push({\n//       task: task,\n//       completed: false,\n//       assignee: null,\n//     });\n//   }\n// }\n// export default new TodoStore();\nconst TodoList = observer(_c = ({\n  store\n}) => {});\n_c2 = TodoList;\nvar _c, _c2;\n$RefreshReg$(_c, \"TodoList$observer\");\n$RefreshReg$(_c2, \"TodoList\");","map":{"version":3,"names":["observer","TodoList","_c","store","_c2","$RefreshReg$"],"sources":["/Users/ivan/Desktop/mistergiften/src/store/calculator.tsx"],"sourcesContent":["import mobx, {\n  autorun,\n  action,\n  computed,\n  makeObservable,\n  observable,\n} from \"mobx\";\nimport { observer } from \"mobx-react\";\n\ninterface ITodo {\n  completed: boolean;\n  task: string;\n  assignee: null;\n}\n// class TodoStore {\n//   todos: Array<ITodo> = [];\n//   pendingRequests = 0;\n\n//   constructor() {\n//     makeObservable(this, {\n//       todos: observable,\n//       pendingRequests: observable,\n//       completedTodosCount: computed,\n//       report: computed,\n//       addTodo: action,\n//     });\n//     autorun(() => console.log(this.report));\n//   }\n\n//   get completedTodosCount() {\n//     return this.todos.filter((todo: ITodo) => todo.completed === true).length;\n//   }\n\n//   get report() {\n//     if (this.todos.length === 0) {\n//       return \"<none>\";\n//     }\n//     var nextTodo: ITodo | undefined = this.todos.find(\n//       (todo: ITodo) => todo.completed === false\n//     );\n//     return `<p>Next todo: \"${nextTodo ? nextTodo.task : \"<none>\"}. Progress: ${\n//       this.completedTodosCount\n//     }/${this.todos.length} </p>`;\n//   }\n\n//   addTodo(task: string) {\n//     this.todos.push({\n//       task: task,\n//       completed: false,\n//       assignee: null,\n//     });\n//   }\n// }\n// export default new TodoStore();\n\nconst TodoList = observer(({ store }) => {});\n"],"mappings":"AAOA,SAASA,QAAQ,QAAQ,YAAY;AAOrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,QAAQ,GAAGD,QAAQ,CAAAE,EAAA,GAACA,CAAC;EAAEC;AAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAACC,GAAA,GAAvCH,QAAQ;AAAA,IAAAC,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}