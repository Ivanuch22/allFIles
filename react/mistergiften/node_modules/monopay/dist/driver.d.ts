import { z } from 'zod';
interface IPaymentInfo {
    referenceId: string | number;
    method: 'GET' | 'POST';
    url: string;
    params?: Record<string, any>;
}
export declare const baseConfigSchema: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export type BaseConfigOptions = z.infer<typeof baseConfigSchema>;
export declare const baseRequestSchema: z.ZodObject<{
    callbackUrl: z.ZodString;
    amount: z.ZodNumber;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    callbackUrl: string;
    amount: number;
}, {
    description?: string | undefined;
    callbackUrl: string;
    amount: number;
}>;
export type BaseRequestOptions = z.infer<typeof baseRequestSchema>;
export declare const baseVerifySchema: z.ZodObject<{
    amount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    amount: number;
}, {
    amount: number;
}>;
export type BaseVerifyOptions = z.infer<typeof baseVerifySchema>;
export interface Receipt<RawReceipt = any> {
    transactionId: string | number;
    cardPan?: string;
    raw: RawReceipt;
}
export declare const defineDriver: <DriverConfigSchema extends z.ZodType<any, z.ZodTypeDef, any>, DriverRequestSchema extends z.ZodType<any, z.ZodTypeDef, any>, DriverVerifySchema extends z.ZodType<any, z.ZodTypeDef, any>, IConfig extends z.TypeOf<DriverConfigSchema> & {}, IRequest extends z.TypeOf<DriverRequestSchema> & {
    description?: string | undefined;
    callbackUrl: string;
    amount: number;
}, IVerify extends z.TypeOf<DriverVerifySchema> & {
    amount: number;
}, DefaultConfig extends Partial<IConfig>>({ schema, defaultConfig, request, verify, }: {
    schema: {
        config: DriverConfigSchema;
        request: DriverRequestSchema;
        verify: DriverVerifySchema;
    };
    defaultConfig: DefaultConfig;
    request: (arg: {
        ctx: IConfig;
        options: IRequest;
    }) => Promise<IPaymentInfo>;
    verify: (arg: {
        ctx: IConfig;
        options: IVerify;
        params: Record<string, any>;
    }) => Promise<Receipt>;
}) => (config: Omit<IConfig, keyof DefaultConfig> & Partial<DefaultConfig>) => {
    request: (options: IRequest) => Promise<{
        getScript: () => string;
        referenceId: string | number;
        method: 'GET' | 'POST';
        url: string;
        params?: Record<string, any> | undefined;
    }>;
    verify: (options: IVerify, params: Record<string, any>) => Promise<Receipt<any>>;
    requestPayment: (options: IRequest) => Promise<{
        getScript: () => string;
        referenceId: string | number;
        method: 'GET' | 'POST';
        url: string;
        params?: Record<string, any> | undefined;
    }>;
    verifyPayment: (options: IVerify, params: Record<string, any>) => Promise<Receipt<any>>;
};
export {};
