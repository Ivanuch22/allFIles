"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBehpardakhtDriver = void 0;
const soap = require("soap");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const generateId_1 = require("../../utils/generateId");
const API = require("./api");
const dateFormat = (date = new Date()) => {
    const yyyy = date.getFullYear();
    const mm = date.getMonth() + 1;
    const dd = date.getDate();
    return yyyy.toString() + mm.toString() + dd.toString();
};
const timeFormat = (date = new Date()) => {
    const hh = date.getHours();
    const mm = date.getMonth();
    const ss = date.getSeconds();
    return hh.toString() + mm.toString() + ss.toString();
};
const throwError = (errorCode) => {
    const message = API.errors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createBehpardakhtDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            terminalId: zod_1.z.number(),
            username: zod_1.z.string(),
            password: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            payerId: zod_1.z.number().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl',
            verify: 'https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl',
            payment: 'https://bpm.shaparak.ir/pgwchannel/startpay.mellat',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, description, payerId } = options;
        const { terminalId, username, password, links } = ctx;
        const client = await soap.createClientAsync(links.request);
        const requestFields = {
            terminalId,
            userName: username,
            userPassword: password,
            amount,
            callBackUrl: callbackUrl,
            orderId: (0, generateId_1.generateId)(),
            localDate: dateFormat(),
            localTime: timeFormat(),
            payerId: payerId || 0,
            additionalData: description || '',
        };
        const response = client.bpPayRequest(requestFields);
        const splittedResponse = response.split(', ');
        const ResCode = splittedResponse[0];
        const RefId = splittedResponse[1];
        if (ResCode.toString() !== '0') {
            throwError(ResCode);
        }
        return {
            method: 'POST',
            referenceId: RefId,
            url: links.payment,
            params: {
                RefId,
            },
        };
    },
    verify: async ({ ctx, params }) => {
        const { RefId, ResCode, saleOrderId, SaleReferenceId, CardHolderPan } = params;
        const { terminalId, username, password, links } = ctx;
        if (ResCode !== '0') {
            throwError(ResCode);
        }
        const soapClient = await soap.createClientAsync(links.verify);
        const requestFields = {
            terminalId,
            userName: username,
            userPassword: password,
            orderId: saleOrderId,
            saleOrderId: saleOrderId,
            saleReferenceId: SaleReferenceId,
        };
        const verifyResponse = soapClient.bpVerifyRequest(requestFields);
        if (verifyResponse.toString() !== '0') {
            if (verifyResponse.toString() !== '43') {
                soapClient.bpReversalRequest(requestFields);
            }
            throwError(ResCode);
        }
        const settleResponse = soapClient.bpSettleRequest(requestFields);
        if (settleResponse.toString() !== '0') {
            if (settleResponse.toString() !== '45' && settleResponse.toString() !== '48') {
                soapClient.bpReversalRequest(requestFields);
            }
            throwError(ResCode);
        }
        return {
            transactionId: RefId,
            cardPan: CardHolderPan,
            raw: params,
        };
    },
});
//# sourceMappingURL=behpardakht.js.map