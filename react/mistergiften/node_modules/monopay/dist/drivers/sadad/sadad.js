"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSadadDriver = void 0;
const axios_1 = require("axios");
const CryptoJS = require("crypto-js");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const generateId_1 = require("../../utils/generateId");
const API = require("./api");
const signData = (message, key) => {
    try {
        const keyHex = CryptoJS.enc.Utf8.parse(key);
        const encrypted = CryptoJS.DES.encrypt(message, keyHex, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7,
        });
        return encrypted.toString();
    }
    catch (err) {
        throw new exceptions_1.BadConfigError({ message: 'The signing process has failed. Error: ' + err, isIPGError: false });
    }
};
const throwError = (errorCode) => {
    var _a;
    const message = (_a = API.requestErrors[errorCode]) !== null && _a !== void 0 ? _a : API.verifyErrors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createSadadDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            merchantId: zod_1.z.string(),
            terminalId: zod_1.z.string(),
            terminalKey: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            multiplexingData: API.multiplexingObjectSchema.optional(),
            appName: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://sadad.shaparak.ir/api/v0/Request/PaymentRequest',
            verify: 'https://sadad.shaparak.ir/api/v0/Advice/Verify',
            payment: 'https://sadad.shaparak.ir/Purchase',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, mobile, multiplexingData, appName } = options;
        const { merchantId, terminalId, terminalKey, links } = ctx;
        const orderId = (0, generateId_1.generateId)();
        const response = await axios_1.default.post(links.request, {
            Amount: amount,
            LocalDateTime: new Date().toISOString(),
            MerchantId: merchantId,
            TerminalId: terminalId,
            OrderId: orderId,
            ReturnUrl: callbackUrl,
            ApplicationName: appName,
            SignData: signData(`${terminalId};${orderId};${amount}`, terminalKey),
            MultiplexingData: multiplexingData,
            UserId: mobile ? +mobile : undefined,
        });
        if (response.data.ResCode !== 0) {
            throwError(response.data.ResCode.toString());
        }
        return {
            method: 'GET',
            referenceId: response.data.Token,
            url: links.payment,
            params: {
                Token: response.data.Token,
            },
        };
    },
    verify: async ({ ctx, params }) => {
        const { HashedCardNo, ResCode, Token } = params;
        const { terminalKey, links } = ctx;
        if (ResCode !== 0) {
            throwError(ResCode.toString());
        }
        const response = await axios_1.default.post(links.verify, {
            SignData: signData(Token, terminalKey),
            Token,
        });
        const { ResCode: verificationResCode, SystemTraceNo } = response.data;
        if (verificationResCode !== 0) {
            throwError(verificationResCode.toString());
        }
        return {
            transactionId: SystemTraceNo,
            cardPan: HashedCardNo,
            raw: params,
        };
    },
});
//# sourceMappingURL=sadad.js.map