import { z } from 'zod';
export interface RequestPaymentReq {
    MerchantId: string;
    TerminalId: string;
    Amount: number;
    OrderId: number;
    LocalDateTime: string;
    ReturnUrl: string;
    SignData: string;
    AdditionalData?: string;
    MultiplexingData?: MultiplexingObject;
    UserId?: number;
    ApplicationName?: string;
}
export interface RequestPaymentRes {
    ResCode: number;
    Token: string;
    Description: string;
}
export declare const multiplexingRowSchema: z.ZodObject<{
    IbanNumber: z.ZodNumber;
    Value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    IbanNumber: number;
    Value: number;
}, {
    IbanNumber: number;
    Value: number;
}>;
export type MultiplexingRow = z.infer<typeof multiplexingRowSchema>;
export declare const multiplexingObjectSchema: z.ZodObject<{
    Type: z.ZodUnion<[z.ZodLiteral<"Percentage">, z.ZodLiteral<"Amount">]>;
    MultiplexingRows: z.ZodArray<z.ZodObject<{
        IbanNumber: z.ZodNumber;
        Value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        IbanNumber: number;
        Value: number;
    }, {
        IbanNumber: number;
        Value: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    Type: "Percentage" | "Amount";
    MultiplexingRows: {
        IbanNumber: number;
        Value: number;
    }[];
}, {
    Type: "Percentage" | "Amount";
    MultiplexingRows: {
        IbanNumber: number;
        Value: number;
    }[];
}>;
export type MultiplexingObject = z.infer<typeof multiplexingObjectSchema>;
export interface CallbackParams {
    OrderId: number | string;
    HashedCardNo: string;
    PrimaryAccNo: string;
    SwitchResCode: string | number;
    ResCode: 0 | -1;
    Token: string;
}
export interface VerifyPaymentReq {
    Token: string;
    SignData: string;
}
export interface VerifyPaymentRes {
    ResCode: 0 | -1;
    Amount: number;
    Description: string;
    RetrivalRefNo: string;
    SystemTraceNo: string;
    OrderId: number;
}
export declare const requestErrors: Record<string, string>;
export declare const verifyErrors: Record<string, string>;
export declare const IPGConfigErrors: string[];
