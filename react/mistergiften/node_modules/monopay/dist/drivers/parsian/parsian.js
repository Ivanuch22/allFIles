"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParsianDriver = void 0;
const soap = require("soap");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const generateId_1 = require("../../utils/generateId");
exports.createParsianDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            merchantId: zod_1.z.string(),
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
        }),
        request: zod_1.z.object({}),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://pec.shaparak.ir/NewIPGServices/Sale/SaleService.asmx?wsdl',
            verify: 'https://pec.shaparak.ir/NewIPGServices/Confirm/ConfirmService.asmx?wsdl',
            payment: 'https://pec.shaparak.ir/NewIPG/',
        },
    },
    request: async ({ options, ctx }) => {
        const { amount, callbackUrl, description } = options;
        const { merchantId, links } = ctx;
        const client = await soap.createClientAsync(links.request);
        const requestData = {
            Amount: amount,
            CallBackUrl: callbackUrl,
            AdditionalData: description || '',
            LoginAccount: merchantId,
            OrderId: (0, generateId_1.generateId)(),
        };
        const [response] = await client.SalePaymentRequestAsync({ requestData });
        const { Status, Token } = response.SalePaymentRequestResult;
        if (Status.toString() !== '0' || typeof Token === 'undefined') {
            throw new exceptions_1.GatewayFailureError({ message: 'خطایی در درخواست پرداخت به‌وجود آمد' });
        }
        return {
            method: 'GET',
            referenceId: Token,
            url: links.payment,
            params: { Token },
        };
    },
    verify: async ({ ctx, params }) => {
        const { Token, status } = params;
        const { merchantId, links } = ctx;
        if (status.toString() !== '0') {
            throw new exceptions_1.UserError({ message: 'تراکنش توسط کاربر لغو شد.' });
        }
        const soapClient = await soap.createClientAsync(links.verify);
        const requestData = {
            LoginAccount: merchantId,
            Token: Number(Token),
        };
        const [verifyResponse] = await soapClient.ConfirmPaymentAsync({ requestData });
        const { CardNumberMasked, RRN, Status } = verifyResponse.ConfirmPaymentResult;
        if (!(Status.toString() === '0' && RRN > 0)) {
            const reversalRequestFields = requestData;
            const reversalResponse = soapClient.ReversalRequest(reversalRequestFields);
            if (reversalResponse.Status !== '0') {
                throw new exceptions_1.GatewayFailureError({ message: 'خطایی در تایید پرداخت به‌وجود آمد و مبلغ بازگشته نشد.' });
            }
            throw new exceptions_1.GatewayFailureError({ message: 'خطایی در تایید پرداخت به‌وجود آمد' });
        }
        return {
            transactionId: RRN,
            cardPan: CardNumberMasked,
            raw: verifyResponse,
        };
    },
});
//# sourceMappingURL=parsian.js.map