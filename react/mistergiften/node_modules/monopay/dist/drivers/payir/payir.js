"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPayirDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const API = require("./api");
const getApiKey = (apiKey, sandbox) => (sandbox ? 'test' : apiKey);
const throwError = (errorCode) => {
    const message = API.errors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createPayirDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            sandbox: zod_1.z.boolean().optional(),
            apiKey: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            nationalCode: zod_1.z.string().optional(),
            validCardNumber: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://pay.ir/pg/send',
            verify: 'https://pay.ir/pg/verify',
            payment: 'https://pay.ir/pg/',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, description, mobile, nationalCode, validCardNumber } = options;
        const { apiKey, links, sandbox } = ctx;
        const response = await axios_1.default.post(links.request, {
            api: getApiKey(apiKey, sandbox !== null && sandbox !== void 0 ? sandbox : false),
            amount,
            redirect: callbackUrl,
            description,
            mobile,
            nationalCode,
            validCardNumber,
        });
        const statusCode = response.data.status.toString();
        if (statusCode !== '1') {
            throwError(statusCode);
        }
        response.data = response.data;
        return {
            method: 'GET',
            referenceId: response.data.token,
            url: links.payment + response.data.token,
        };
    },
    verify: async ({ ctx, params }) => {
        const { status, token } = params;
        const { apiKey, sandbox, links } = ctx;
        const statusCode = status.toString();
        if (statusCode !== '1') {
            throwError(statusCode);
        }
        const response = await axios_1.default.post(links.verify, {
            api: getApiKey(apiKey, sandbox !== null && sandbox !== void 0 ? sandbox : false),
            token,
        });
        const verifyStatus = response.data.status.toString();
        if (verifyStatus !== '1') {
            throwError(verifyStatus);
        }
        response.data = response.data;
        return {
            raw: response.data,
            transactionId: response.data.transId,
            cardPan: response.data.cardNumber,
        };
    },
});
//# sourceMappingURL=payir.js.map