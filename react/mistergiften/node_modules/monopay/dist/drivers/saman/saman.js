"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSamanDriver = void 0;
const axios_1 = require("axios");
const soap = require("soap");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const API = require("./api");
const throwError = (errorCode) => {
    var _a;
    const message = (_a = API.purchaseErrors[errorCode]) !== null && _a !== void 0 ? _a : API.callbackErrors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createSamanDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            merchantId: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            wage: zod_1.z.number().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://sep.shaparak.ir/Payments/InitPayment.asmx?WSDL',
            verify: 'https://sep.shaparak.ir/payments/referencepayment.asmx?WSDL',
            payment: 'https://sep.shaparak.ir/payment.aspx',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, mobile, wage } = options;
        const { merchantId, links } = ctx;
        const response = await axios_1.default.post(links.request, {
            Amount: amount,
            RedirectURL: callbackUrl,
            CellNumber: mobile,
            TerminalId: merchantId,
            Action: 'token',
            Wage: wage,
        });
        if (response.data.status !== 1 && response.data.errorCode !== undefined) {
            throwError(response.data.errorCode.toString());
        }
        if (!response.data.token) {
            throw new exceptions_1.GatewayFailureError();
        }
        return {
            method: 'POST',
            referenceId: response.data.token,
            url: links.payment,
            params: {
                Token: response.data.token,
                GetMethod: true,
            },
        };
    },
    verify: async ({ ctx, params }) => {
        const { RefNum: referenceId, TraceNo: transactionId, Status: status } = params;
        const { merchantId, links } = ctx;
        if (!referenceId) {
            throwError(status.toString());
        }
        const soapClient = await soap.createClientAsync(links.verify);
        const responseStatus = +(await soapClient.verifyTransaction(referenceId, merchantId));
        if (responseStatus < 0) {
            throwError(responseStatus.toString());
        }
        return {
            transactionId: +transactionId,
            cardPan: params.SecurePan,
            raw: params,
        };
    },
});
//# sourceMappingURL=saman.js.map