"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVandarDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
exports.createVandarDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            api_key: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile_number: zod_1.z.string().optional(),
            factorNumber: zod_1.z.string().optional(),
            description: zod_1.z.string().optional(),
            valid_card_number: zod_1.z.string().optional(),
            comment: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({
            status: zod_1.z.number().optional(),
            realAmount: zod_1.z.number().optional(),
            wage: zod_1.z.string().optional(),
            transId: zod_1.z.number().optional(),
            factorNumber: zod_1.z.string().optional(),
            mobile: zod_1.z.string().optional(),
            description: zod_1.z.string().optional(),
            cardNumber: zod_1.z.string().optional(),
            paymentDate: zod_1.z.string().optional(),
            cid: zod_1.z.string().optional(),
            message: zod_1.z.string().optional(),
            errors: zod_1.z.array(zod_1.z.string()).optional(),
        }),
    },
    defaultConfig: {
        links: {
            request: 'https://ipg.vandar.io/api/v3/send',
            verify: 'https://ipg.vandar.io/api/v3/verify',
            payment: 'https://ipg.vandar.io/v3/',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl } = options, otherOptions = __rest(options, ["amount", "callbackUrl"]);
        const { api_key, links } = ctx;
        const response = await axios_1.default.post(links.request, Object.assign({ api_key, amount: amount, callback_url: callbackUrl }, otherOptions), {
            validateStatus: () => true,
        });
        const { errors, token } = response.data;
        if (errors === null || errors === void 0 ? void 0 : errors.length)
            throw new exceptions_1.GatewayFailureError({ message: errors.join('\n') });
        if (!token)
            throw new exceptions_1.GatewayFailureError({ message: 'No token was provided by the IPG' });
        return {
            method: 'GET',
            referenceId: token,
            url: links.payment + response.data.token,
        };
    },
    verify: async ({ ctx, params }) => {
        const { token, payment_status } = params;
        const { api_key, links } = ctx;
        if (payment_status !== 'OK')
            throw new exceptions_1.GatewayFailureError();
        const response = await axios_1.default.post(links.verify, {
            api_key,
            token,
        }, {
            validateStatus: () => true,
        });
        const { errors, transId, cardNumber } = response.data;
        if (errors === null || errors === void 0 ? void 0 : errors.length)
            throw new exceptions_1.GatewayFailureError({ message: errors.join('\n') });
        if (transId === undefined)
            throw new exceptions_1.GatewayFailureError({ message: 'No transaction ID was provided by the IPG' });
        return {
            transactionId: transId,
            cardPan: cardNumber,
            raw: {
                token,
                payment_status,
            },
        };
    },
});
//# sourceMappingURL=vandar.js.map