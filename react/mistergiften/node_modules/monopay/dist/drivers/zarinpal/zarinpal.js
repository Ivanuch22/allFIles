"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createZarinpalDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const API = require("./api");
const getLinks = (links, sandbox) => sandbox
    ? {
        request: 'https://sandbox.zarinpal.com/pg/v4/payment/request.json',
        verify: 'https://sandbox.zarinpal.com/pg/v4/payment/verify.json',
        payment: 'https://sandbox.zarinpal.com/pg/StartPay/',
    }
    : links;
const throwError = (errorCode) => {
    var _a;
    const message = (_a = API.requestErrors[errorCode]) !== null && _a !== void 0 ? _a : API.verifyErrors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createZarinpalDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            sandbox: zod_1.z.boolean().optional(),
            merchantId: zod_1.z.string(),
        }),
        request: zod_1.z.object({ mobile: zod_1.z.string().optional(), email: zod_1.z.string().optional() }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://api.zarinpal.com/pg/v4/payment/request.json',
            verify: 'https://api.zarinpal.com/pg/v4/payment/verify.json',
            payment: 'https://www.zarinpal.com/pg/StartPay/',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, mobile, email } = options, otherOptions = __rest(options, ["amount", "callbackUrl", "mobile", "email"]);
        const { merchantId, sandbox } = ctx;
        const links = getLinks(ctx.links, sandbox !== null && sandbox !== void 0 ? sandbox : false);
        const response = await axios_1.default.post(links.request, Object.assign({ merchant_id: merchantId, amount: amount, callback_url: callbackUrl, metadata: { email, mobile } }, otherOptions));
        const { data, errors } = response.data;
        if (!Array.isArray(data) && !!data) {
            return {
                method: 'GET',
                referenceId: data.authority,
                url: links.payment + data.authority,
            };
        }
        if (!Array.isArray(errors)) {
            throwError(errors.code.toString());
        }
        throw new exceptions_1.GatewayFailureError();
    },
    verify: async ({ ctx, options, params }) => {
        const { Authority: authority, Status: status } = params;
        const { amount } = options;
        const { merchantId, sandbox } = ctx;
        const links = getLinks(ctx.links, sandbox !== null && sandbox !== void 0 ? sandbox : false);
        if (status !== 'OK')
            throw new exceptions_1.GatewayFailureError();
        const response = await axios_1.default.post(links.verify, {
            authority: authority.toString(),
            merchant_id: merchantId,
            amount: amount,
        }, {});
        const { data, errors } = response.data;
        if (!Array.isArray(data)) {
            return {
                transactionId: data.ref_id,
                cardPan: data.card_pan,
                raw: data,
            };
        }
        if (!Array.isArray(errors)) {
            throwError(errors.code.toString());
        }
        throw new exceptions_1.GatewayFailureError();
    },
});
//# sourceMappingURL=zarinpal.js.map