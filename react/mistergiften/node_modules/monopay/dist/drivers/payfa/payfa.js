"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPayfaDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const getHeaders = (apiKey) => {
    return {
        'X-API-Key': apiKey,
    };
};
exports.createPayfaDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            apiKey: zod_1.z.string(),
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
        }),
        request: zod_1.z.object({
            mobileNumber: zod_1.z.string().optional(),
            invoiceId: zod_1.z.string().optional(),
            cardNumber: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://payment.payfa.com/v2/api/Transaction/Request',
            verify: 'https://payment.payfa.com/v2/api/Transaction/Verify/',
            payment: 'https://payment.payfa.ir/v2/api/Transaction/Pay/',
        },
    },
    request: async ({ options, ctx }) => {
        var _a;
        const { amount, callbackUrl, description, mobileNumber, cardNumber, invoiceId } = options;
        let response;
        try {
            response = await axios_1.default.post(ctx.links.request, {
                amount,
                callbackUrl,
                description,
                mobileNumber,
                cardNumber,
                invoiceId,
            }, {
                headers: getHeaders(ctx.apiKey),
            });
        }
        catch (error) {
            if (error instanceof axios_1.AxiosError) {
                throw new exceptions_1.GatewayFailureError({
                    message: (_a = error.response) === null || _a === void 0 ? void 0 : _a.data.message,
                });
            }
        }
        if (!(response === null || response === void 0 ? void 0 : response.data)) {
            throw new exceptions_1.GatewayFailureError();
        }
        if ('errorCode' in response.data) {
            throw new exceptions_1.GatewayFailureError({ message: response.data.message || undefined });
        }
        const { paymentId } = response.data;
        return {
            method: 'GET',
            referenceId: paymentId,
            url: ctx.links.payment + paymentId,
            params: {},
        };
    },
    verify: async ({ ctx, params }) => {
        var _a;
        const { paymentId } = params;
        let response;
        try {
            response = await axios_1.default.post(ctx.links.verify + paymentId, {}, { headers: getHeaders(ctx.apiKey) });
        }
        catch (error) {
            if (error instanceof axios_1.AxiosError) {
                throw new exceptions_1.UserError((_a = error.response) === null || _a === void 0 ? void 0 : _a.data.message);
            }
        }
        if (!(response === null || response === void 0 ? void 0 : response.data)) {
            throw new exceptions_1.UserError();
        }
        if ('errorCode' in response.data) {
            throw new exceptions_1.UserError({ message: response.data.message || undefined });
        }
        const { transactionId, cardNo } = response.data;
        return {
            raw: response.data,
            transactionId: transactionId,
            cardPan: cardNo,
        };
    },
});
//# sourceMappingURL=payfa.js.map