"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNextpayDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const generateUuid_1 = require("../../utils/generateUuid");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const API = require("./api");
const throwError = (errorCode) => {
    const message = API.errors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createNextpayDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            apiKey: zod_1.z.string().optional(),
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            customFields: zod_1.z.record(zod_1.z.string()).optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://nextpay.org/nx/gateway/token',
            verify: 'https://nextpay.org/nx/gateway/verify',
            payment: 'https://nextpay.org/nx/gateway/payment/',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, mobile, customFields } = options;
        const { links, apiKey } = ctx;
        const response = await axios_1.default.post(links.request, {
            api_key: apiKey,
            amount: amount * 10,
            callback_uri: callbackUrl,
            customer_phone: mobile ? +mobile : undefined,
            order_id: (0, generateUuid_1.generateUuid)(),
            custom_json_fields: customFields,
        });
        const { code, trans_id } = response.data;
        const responseCode = code.toString();
        if (responseCode !== '0') {
            throwError(responseCode);
        }
        return {
            method: 'GET',
            referenceId: trans_id,
            url: links.payment + trans_id,
        };
    },
    verify: async ({ ctx, params }) => {
        const { amount, trans_id } = params;
        const { apiKey, links } = ctx;
        if (!trans_id) {
            throw new exceptions_1.UserError({ message: 'تراکنش توسط کاربر لغو شد.' });
        }
        const response = await axios_1.default.post(links.verify, {
            amount: +amount * 10,
            trans_id,
            api_key: apiKey,
        });
        const { Shaparak_Ref_Id, code, card_holder } = response.data;
        const responseCode = code.toString();
        if (responseCode !== '0') {
            throwError(responseCode);
        }
        return {
            raw: response.data,
            transactionId: Shaparak_Ref_Id,
            cardPan: card_holder,
        };
    },
});
//# sourceMappingURL=nextpay.js.map