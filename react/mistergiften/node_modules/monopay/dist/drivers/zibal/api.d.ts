import { z } from 'zod';
export declare const multiplexingObjectSchema: z.ZodObject<{
    bankAccount: z.ZodString;
    subMerchantId: z.ZodString;
    walletID: z.ZodString;
    amount: z.ZodNumber;
    wagePayer: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    amount: number;
    bankAccount: string;
    subMerchantId: string;
    walletID: string;
    wagePayer: boolean;
}, {
    amount: number;
    bankAccount: string;
    subMerchantId: string;
    walletID: string;
    wagePayer: boolean;
}>;
export type MultiplexingObject = z.infer<typeof multiplexingObjectSchema>;
export interface RequestPaymentReq {
    merchant: string;
    amount: number;
    callbackUrl: string;
    description?: string;
    orderId?: string;
    mobile?: string;
    allowedCards?: string[];
    linkToPay?: boolean;
    sms?: boolean;
    percentMode?: 0 | 1;
    feeMode?: 0 | 1 | 2;
    multiplexingInfos?: MultiplexingObject[];
}
export interface RequestPaymentRes {
    trackId: number;
    result: number;
    payLink?: string;
    message: string;
}
export declare const purchaseErrors: Record<string, string>;
export interface CallbackParams {
    success: '0' | '1';
    trackId: string;
    orderId?: string;
    status: '-1' | '-2' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12';
}
export declare const callbackErrors: Record<string, string>;
export interface VerifyPaymentReq {
    merchant: string;
    trackId: number;
}
export interface VerifyPaymentRes {
    paidAt: string;
    cardNumber: string;
    status: number;
    amount: number;
    refNumber: number;
    description: string;
    orderId: string;
    result: number;
    message: string;
}
export declare const verifyErrors: Record<string, string>;
export declare const IPGConfigErrors: string[];
export declare const IPGUserErrors: string[];
