"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createZibalDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const API = require("./api");
const getMerchantId = (merchantId, sandbox) => (sandbox ? 'zibal' : merchantId);
const throwError = (errorCode) => {
    var _a, _b;
    const message = (_b = (_a = API.purchaseErrors[errorCode]) !== null && _a !== void 0 ? _a : API.callbackErrors[errorCode]) !== null && _b !== void 0 ? _b : API.verifyErrors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createZibalDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            sandbox: zod_1.z.boolean().optional(),
            merchantId: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            orderId: zod_1.z.string().optional(),
            allowedCards: zod_1.z.array(zod_1.z.string()).optional(),
            linkToPay: zod_1.z.boolean().optional(),
            sms: zod_1.z.boolean().optional(),
            percentMode: zod_1.z.union([zod_1.z.literal(0), zod_1.z.literal(1)]).optional(),
            feeMode: zod_1.z.union([zod_1.z.literal(0), zod_1.z.literal(1), zod_1.z.literal(2)]).optional(),
            multiplexingInfos: zod_1.z.array(API.multiplexingObjectSchema).optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://gateway.zibal.ir/v1/request',
            verify: 'https://gateway.zibal.ir/v1/verify',
            payment: 'https://gateway.zibal.ir/start/',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount } = options, otherOptions = __rest(options, ["amount"]);
        const { merchantId, sandbox, links } = ctx;
        const response = await axios_1.default.post(links.request, Object.assign({ merchant: getMerchantId(merchantId, sandbox !== null && sandbox !== void 0 ? sandbox : false), amount: amount }, otherOptions));
        const { result, trackId } = response.data;
        if (result !== 100) {
            throwError(result.toString());
        }
        return {
            method: 'GET',
            referenceId: trackId,
            url: links.payment + trackId,
        };
    },
    verify: async ({ ctx, params }) => {
        const { status, success, trackId } = params;
        const { merchantId, sandbox, links } = ctx;
        if (success.toString() === '0') {
            throwError(status.toString());
        }
        const response = await axios_1.default.post(links.verify, {
            merchant: getMerchantId(merchantId, sandbox !== null && sandbox !== void 0 ? sandbox : false),
            trackId: +trackId,
        });
        const { result } = response.data;
        if (result !== 100) {
            throwError(result.toString());
        }
        return {
            raw: response.data,
            transactionId: response.data.refNumber,
            cardPan: response.data.cardNumber,
        };
    },
});
//# sourceMappingURL=zibal.js.map