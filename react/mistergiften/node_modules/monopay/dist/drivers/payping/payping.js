"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPaypingDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const statusToMessage = (status = 500) => {
    var _a;
    const map = {
        '400': 'مشکلی در اطلاعات ارسالی وجود دارد.',
        '401': 'شما به این آیتم دسترسی ندارید.',
        '403': 'دسترسی شما غیر مجاز است.',
        '404': 'یافت نشد.',
        '500': 'مشکلی از طرف درگاه پرداخت رخ داده.',
        '502': 'سرور پراکسی با خطا مواجه شده است.',
        '503': 'سرور درگاه پرداخت در حال حاضر پاسخ‌گو نیست.',
    };
    return (_a = map[status.toString()]) !== null && _a !== void 0 ? _a : map['500'];
};
exports.createPaypingDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
            apiKey: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            email: zod_1.z.string().optional(),
            name: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://api.payping.ir/v2/pay',
            verify: 'https://api.payping.ir/v2/pay/verify',
            payment: 'https://api.payping.ir/v2/pay/gotoipg/',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, mobile, email, name, description } = options;
        const { apiKey, links } = ctx;
        let response;
        try {
            response = await axios_1.default.post(links.request, {
                amount: amount * 10,
                returnUrl: callbackUrl,
                description,
                payerIdentity: mobile || email,
                payerName: name,
            }, {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                },
            });
        }
        catch (error) {
            throw new exceptions_1.GatewayFailureError({ message: statusToMessage(error.response.status) });
        }
        const { code } = response.data;
        return {
            method: 'GET',
            referenceId: code,
            url: links.payment + code,
        };
    },
    verify: async ({ ctx, options, params }) => {
        const { code, refid } = params;
        const { amount } = options;
        const { apiKey, links } = ctx;
        let response;
        try {
            response = await axios_1.default.post(links.verify, {
                amount: amount * 10,
                refId: code,
            }, {
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                },
            });
        }
        catch (error) {
            throw new exceptions_1.GatewayFailureError({ message: statusToMessage(error.response.status) });
        }
        const { cardNumber } = response.data;
        return {
            raw: response.data,
            transactionId: refid,
            cardPan: cardNumber,
        };
    },
});
//# sourceMappingURL=payping.js.map