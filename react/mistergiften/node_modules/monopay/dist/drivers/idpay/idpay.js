"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIdpayDriver = void 0;
const axios_1 = require("axios");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const generateUuid_1 = require("../../utils/generateUuid");
const API = require("./api");
const getHeaders = (apiKey, sandbox) => ({
    'X-SANDBOX': sandbox ? '1' : '0',
    'X-API-KEY': apiKey,
});
const throwError = (errorCode) => {
    var _a;
    const message = (_a = API.errors[errorCode]) !== null && _a !== void 0 ? _a : API.callbackErrors[errorCode];
    if (API.IPGConfigErrors.includes(errorCode))
        throw new exceptions_1.BadConfigError({ message, isIPGError: true, code: errorCode });
    if (API.IPGUserErrors.includes(errorCode))
        throw new exceptions_1.UserError({ message, code: errorCode });
    throw new exceptions_1.GatewayFailureError({ message, code: errorCode });
};
exports.createIdpayDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
            }),
            sandbox: zod_1.z.boolean().nullish(),
            apiKey: zod_1.z.string(),
        }),
        request: zod_1.z.object({
            mobile: zod_1.z.string().optional(),
            email: zod_1.z.string().optional(),
            name: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://api.idpay.ir/v1.1/payment',
            verify: 'https://api.idpay.ir/v1.1/payment/verify',
        },
    },
    request: async ({ ctx, options }) => {
        const { amount, callbackUrl, mobile, email, description, name } = options;
        const { apiKey, sandbox, links } = ctx;
        const response = await axios_1.default.post(links.request, {
            amount: amount,
            callback: callbackUrl,
            mail: email,
            phone: mobile,
            order_id: (0, generateUuid_1.generateUuid)(),
            name,
            desc: description,
        }, {
            headers: getHeaders(apiKey, sandbox !== null && sandbox !== void 0 ? sandbox : false),
        });
        if ('error_message' in response.data) {
            const error = response.data;
            throwError(error.error_code.toString());
        }
        response.data = response.data;
        return {
            method: 'GET',
            referenceId: response.data.id,
            url: links.verify,
        };
    },
    verify: async ({ ctx, params }) => {
        const { apiKey, links, sandbox } = ctx;
        const { id, order_id, status } = params;
        const statusCode = status.toString();
        if (statusCode !== '200') {
            throwError(statusCode);
        }
        const response = await axios_1.default.post(links.verify, {
            order_id,
            id,
        }, {
            headers: getHeaders(apiKey, sandbox !== null && sandbox !== void 0 ? sandbox : false),
        });
        if ('error_message' in response.data) {
            throwError(response.data.error_code.toString());
        }
        response.data = response.data;
        return {
            transactionId: response.data.track_id,
            cardPan: response.data.payment.card_no,
            raw: response.data,
        };
    },
});
//# sourceMappingURL=idpay.js.map