"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPasargadDriver = exports.errorMessage = void 0;
const rsa_xml_1 = require("@keivan.sf/rsa-xml");
const axios_1 = require("axios");
const crypto = require("crypto");
const fs = require("fs/promises");
const zod_1 = require("zod");
const driver_1 = require("../../driver");
const exceptions_1 = require("../../exceptions");
const getCurrentTimestamp = () => {
    const currentDateISO = new Date().toISOString();
    return currentDateISO.replace(/-/g, '/').replace('T', ' ').replace('Z', '').split('.')[0];
};
const signData = async (data, privateKeyXMLFile) => {
    try {
        const sign = crypto.createSign('SHA1');
        sign.write(JSON.stringify(data));
        sign.end();
        const pemKey = await convertXmlToPemKey(privateKeyXMLFile);
        const signedData = sign.sign(Buffer.from(pemKey), 'base64');
        return signedData;
    }
    catch (err) {
        throw new exceptions_1.BadConfigError({ message: 'The signing process has failed. Error: ' + err, isIPGError: false });
    }
};
const convertXmlToPemKey = async (xmlFilePath) => {
    const xmlKey = (await fs.readFile(xmlFilePath)).toString();
    const rsa = (0, rsa_xml_1.default)();
    return rsa.exportPemKey(xmlKey);
};
exports.errorMessage = 'عملیات با خطا مواجه شد';
exports.createPasargadDriver = (0, driver_1.defineDriver)({
    schema: {
        config: zod_1.z.object({
            privateKeyXMLFile: zod_1.z.string(),
            merchantId: zod_1.z.string(),
            terminalId: zod_1.z.string(),
            links: zod_1.z.object({
                request: zod_1.z.string(),
                verify: zod_1.z.string(),
                payment: zod_1.z.string(),
            }),
        }),
        request: zod_1.z.object({
            invoiceNumber: zod_1.z.string(),
            invoiceDate: zod_1.z.string(),
            mobile: zod_1.z.string().optional(),
            email: zod_1.z.string().optional(),
        }),
        verify: zod_1.z.object({}),
    },
    defaultConfig: {
        links: {
            request: 'https://pep.shaparak.ir/Api/v1/Payment/GetToken',
            verify: 'https://pep.shaparak.ir/Api/v1/Payment/VerifyPayment',
            payment: 'https://pep.shaparak.ir/payment.aspx',
        },
    },
    request: async ({ ctx, options }) => {
        var _a;
        const { amount, callbackUrl, invoiceDate, invoiceNumber, email, mobile } = options;
        const { merchantId, terminalId, privateKeyXMLFile, links } = ctx;
        const data = {
            MerchantCode: merchantId,
            TerminalCode: terminalId,
            Action: 1003,
            Amount: amount,
            InvoiceDate: invoiceDate,
            InvoiceNumber: invoiceNumber,
            RedirectAddress: callbackUrl,
            Timestamp: getCurrentTimestamp(),
        };
        const optionalParams = Object.entries({ Email: email, Mobile: mobile });
        for (const param of optionalParams)
            if (param[1])
                data[param[0]] = param[1];
        const response = await axios_1.default.post(links.request, data, {
            headers: {
                Sign: await signData(data, privateKeyXMLFile),
            },
        });
        if (!((_a = response.data) === null || _a === void 0 ? void 0 : _a.IsSuccess)) {
            throw new exceptions_1.GatewayFailureError({ message: exports.errorMessage });
        }
        return {
            method: 'GET',
            referenceId: response.data.Token,
            url: links.payment,
            params: {
                n: response.data.Token,
            },
        };
    },
    verify: async ({ ctx, options, params }) => {
        var _a;
        const { amount } = options;
        const { iD, iN, tref } = params;
        const { terminalId, merchantId, privateKeyXMLFile, links } = ctx;
        const data = {
            Amount: amount,
            InvoiceDate: iD,
            InvoiceNumber: iN,
            Timestamp: getCurrentTimestamp(),
            TerminalCode: terminalId,
            MerchantCode: merchantId,
        };
        const response = await axios_1.default.post(links.verify, data, {
            headers: {
                Sign: await signData(data, privateKeyXMLFile),
            },
        });
        if (!((_a = response.data) === null || _a === void 0 ? void 0 : _a.IsSuccess))
            throw new exceptions_1.GatewayFailureError({ message: exports.errorMessage });
        return {
            raw: response.data,
            transactionId: tref,
            cardPan: response.data.MaskedCardNumber,
        };
    },
});
//# sourceMappingURL=pasargad.js.map